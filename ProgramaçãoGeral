LOCARES DE DOWLOAD JAVA 17:
- Oracle
- OpenJDK
- Adoptium

AMBIENTE DE LÓGICA:
JAVA SE 17
Eclipse
VSCode
Intellij


JAVA:
- Compila (JAVA C)
- Interpretador (JAVA)

JAVASCRIPT:
- Interpretador

VM = DELTA D (Df - Di) / DELTA T (Tf - Ti)

Constante = que nunca muda
Variante = que sempre pode mudar / Variável é um espaço reservado na mamória do computador para armazenar um tipo de dado determinado.

char: Caracter: O valor armazenado é um caractere. Caracateres geralmente são armazenados em códigos (usualmente)
int: Número inteiro é o tipo padrão e o tamanho do conjunto que pode ser representado normalmente depende da máquina em que o programa está rodando.
float: Número em ponto flutuante de precisão simples. São conhecidos normalmente como números reais.
double: Númeroo em ponto flutuante de precisão dupla
string = Cadeia de caracteres
Bolean: True | False -> Verdadeiro Falso

OPERADORES ARITMÉTICOS:
soma -> +
subtração -> - 
Multiplicação -> x
divisão -> / ou div
resto da divisão -> % ou mod

OPERADORES DE ATRIBUIÇÃO:
igual -> =
Incremento de um -> ++
Decremento de um -> --
Incremento de valor -> +=
Decremento de valor -> -=

OPERADORES LÓGICOS:
E -> && ou AND
Ou -> || ou OR

OPERADORES DE COMPARAÇÃO:
igualdade -> ==
Diferença -> !=
Maior que -> >
Menor que -> <
Maior ou Igual -> >=
Menor ou igual -> <=
     
ESTRUTURA TERNÁRIA
teste ? verdadeiro : falso
int x = 10;
x == 11 ? "oi" : "tchau"

else -> senão

else if -> senão isso, aquilo                    

sempre que tiver if = tem teste

estrutura switch -> alternativa pro if

estruturas de repetição -> for, while, do while -> repetem as coisas por algum tempo que voce determina

while -> mais lento, continua ate chegar no final

for -> mais rapido, mas precisa saber onde termina e nao faz leitura de arquivos

do while (enquanto) -> pode substituir o while, é mais rapido mas precisa de pelo menos uma linha de execução

chaves {} só é obrigatório com mais de uma linha de execução

equals: IGUAL (texto.equals = texto igual)

mult = deslocar o numéro que ta no fundo para frente

string = texto / nomes.

JOptionPane.showMessageDialog(null, "Olá", "Alerta", JOptionPane.WARNING_MESSAGE);
		JOptionPane.showInputDialog("Digite Algo"); 

Estruturas Básicas:

- If ... else if ... else:

if ( idade < 18 ) 
	System.out.println("Menores não poderão ser cadastrados")
else
	System.out.println("Cadastro pode ser realizado")
CLASSE: 
if ( valor % 2 == 0 )
	System.out.println("Esse número é par")
else
	System.out.println("Esse número NÃO é par")


if( mes == 12 || mes == 1 || mes == 2)
	System.out.println("Verão");
else if(mes == 3 || mes == 4 || mes == 5)
	System.out.println("Outono");
else if(mes == 6 || mes == 7 || mes == 8)
	System.out.println("Inverno");
else if(mes == 9 || mes == 10 || mes == 11)
	System.out.println("Primavera");
else
	System.out.println("Valor não considerado");

- Switch ... case ... default:

int mes = 5;
 switch(mes){
         case 1:
             System.out.println("Janeiro");
             break;
         case 2:
             System.out.println("Fevereiro");
             break;
         case 3:
             System.out.println("Março");
             break;
         case 4:
             System.out.println("Abril");
             break;
         default:
             System.out.println("Digite SOMENTE números entre 1 e 4");
             break;
}

- for ...e foreach(for):
TABUADA
For ( int i = 1 ; i <= 10 ; i++){
	System.out.println( valor + " x " + i + " = " + (valor * i));
}


For ( int i = 1 ; i <= 10 ; i++){
	if( i % 2 == 0 ){
		System.out.println( i ));
	}
}


- while ...:

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
 
public class Ler{
    public static void main(String[] args) throws IOException{
        String arquivo = "texto.txt";
            FileReader in = new FileReader(arquivo);
            StringBuilder conteudo = new StringBuilder();
            char[] buffer = new char[4096];
            int read = 0;
        do {
            conteudo.append(buffer, 0, read);
            read = in.read(buffer);
        } while (read >= 0);
        in.close();
        System.out.println(conteudo.toString());
    }
}

- array/[] (vetor e matriz): Um array é um conjunto de dados de tipo semelhante que são referidas por um nome comum como um váriavel. Array de
qualquer tipo pode ser criado e pode ter uma ou mais dimensões(GUARDA MAIS DE UM VALOR). Um elemento específico em um array
é acessado pelo seu índice. Arrays oferecem um meio conveniente de agrupar informações relacionadas.
(obs: sempre contar posição começando pelo 0, ex: 15(0), 26(1) , 31(2), 5(3), 20(4); QUANTIDADE - 1)
int[] valores = {15,26,31,5,20}
System.out.println(valor[2]);

Array de 2 dimensões(TABELAS). Exemplo:
String[][] dados = {
			{"Id","Produto","Preço"},
			{"45","Calça","R$ 110.00"},
			{"14","Blusa","R$ 23,50"}
		}
	System.out.println(dados[0][2])
- metodos.

ARRAY COM 1 LINHA = VETOR ([])
ARRAY COM MAIS DE UMA LINHA = MATRIZ ([][])

/r = serve para fazer retornar
/n = como se fosse enter
println = um embaixo do outro (quebra linha)
print = fica na mesma linha

FUNÇÃO:
- A principal característica é a utilização de técnicas que decompõem a
- Solução de um problema em “blocos” que interagem com um bloco principal. Isso é possível por meio da técnica de refinamentos sucessivos e da modularização dos algoritmos.
- Você pode inserir funções em seus algoritmos, baste ter bem definido o que qual parte da estrutura de código se pretende modularizar.
- As ações de função estão hierarquicamente subordinadas a um algoritmo principal. Dentro de uma função, pode haver o chamamento de outras funções
Há quatro tipos de funções:
	Função sem retorno e argumentos;       (TAMBÉM CONHECIDA COMO PROCEDIMENTO)
	Função sem retorno e com argumentos;   (TAMBÉM CONHECIDA COMO PROCEDIMENTO)


	Função com retorno e sem argumentos;
	Função com retorno e com argumentos;
	
CARACTERÍSTICAS:
- As funções quando não possuem retorno, em C#, elas são declaradas como VOID – vazio. 
- Funções com retorno deve ter o tipo de retorno declarado diferente de VOID.
- Outro ponto que devemos destacar é que toda função deve possuir um nome e seguido por parênteses. Esses, por sua vez, podem conter algo ou não.
- Os elementos presentes nos parênteses são chamados de ARGUMENTOS. Muitas pessoas chamam de parâmetros. 
- Para que uma função faça as suas execuções é necessário “chama-la”, ou seja, escrever o nome da função no momento em que for utilizá-la.
- VOID - SAIDA ESPECIFICADA
EXEMPLOS:
Função SEM RETORNO E SEM ARGUMENTOS:

void mensagem(){
Console.WriteLine(“Olá! Seja bem vindo!”);
}

Função SEM RETORNO E COM ARGUMENTOS:

void mensagem(String nome){
Console.WriteLine(“Olá, Sr(a): “ + nome + “! Seja bem vindo!”);
}

Função COM RETORNO E SEM ARGUMENTOS:
Double valorPI(){
	return 3.1415
}

Função COM RETORNO E COM ARGUMENTOS:

Int areaDoRetangulo(int largura, int altura){
	int resultado;
	resultado  = largura * altura;
	return resultado
}

TRY CATCH:
A instrução try-catch consiste em um bloco try seguido por uma ou mais
cláusulas catch, que especificam os manipuladores para diferentes exceções.

O bloco try contém o código protegido que pode causar a exceção.
O bloco é executado até que uma exceção seja lançada ou ele seja
concluído com êxito. 

try{
    //comandos
}
catch{
    //comandos
}

EXEMPLO TRY CATCH:
Conversão de tipos, Divisão por Zero, Escrita em arquivos. 

object o2 = null;  

try  
{  
    int i2 = (int)o2;   // Error  
}
catch (FileNotFoundException e){ 
	//comandos 
} 
catch (IOException e) {
	//comandos 
} 

EXEMPLO TRY CATCH - FINALLY:
Conversão de tipos, Divisão por Zero, Escrita em arquivos. 

object o2 = null;  

try  
{  
	StreamWriter sw = new StreamWriter(“Arquivo.txt”)
	sw.close(); (TEM QUE USAR ESSE COMANDO PARA FECHAR NO FINALLY)
	sw.WriteLine(“teste”);
}
catch (Exception ex){ 
	//comandos 
} 
finally{
	//comandos (ex: sw.close();)
} 








